// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.1-0.20221002203822-0ca900149e4e DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
)

// RetrieveAllParams defines parameters for RetrieveAll.
type RetrieveAllParams struct {
	// CorrelationId A unique identifier to allow for correlating requests
	CorrelationId *string `json:"correlation-id,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /apis)
	RetrieveAll(w http.ResponseWriter, r *http.Request, params RetrieveAllParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// RetrieveAll operation middleware
func (siw *ServerInterfaceWrapper) RetrieveAll(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RetrieveAllParams

	headers := r.Header

	// ------------- Optional header parameter "correlation-id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("correlation-id")]; found {
		var CorrelationId string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "correlation-id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "correlation-id", runtime.ParamLocationHeader, valueList[0], &CorrelationId)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "correlation-id", Err: err})
			return
		}

		params.CorrelationId = &CorrelationId

	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RetrieveAll(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/apis", wrapper.RetrieveAll).Methods("GET")

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8yU0WvjOBDG/xUx3NtZTtqGo/VbjqNHuZfj6D2VQMfWOFYra1Rp7G4I/t8XOU3Jtrvs",
	"S1n6EKIR0eT7vp80e2i4D+zJS4JqPxVgfctQ7cFQaqINYtlDBbedTSpENkNDSfUkaFBQYc2DqPW/N0mF",
	"oXY2dWRUvTsUjUrUCEfFcYveJsy9krJeSUfq/3+gALHiCCq4JkMRhUzupf6yqeGR4i5XUMBIMR1kLMuz",
	"cglTARzIY7BQwcW8VUBA6bIFWGCw82JL8t7I3yQfqJ9Dlm3Z3xio4D+SaGmktXOzoIg9CcUE1d1bGWs1",
	"ePs0kLKGvNjWUlTCCp3jZ9VyVA3HSA7F+q2K9DRQkgSZDlTQERqKUIDHPqf3+lv22hooIDUd9ZjNtxx7",
	"FKhgGKwZV4echGJuc4e6Xevrpb7a7C8nfVquJr06rS8mfXd5hfX6z83b7ZPy7HzKTHchi0oSrd/CNG0K",
	"iJQC+0QzlvPlMn817IX8TAhDcLaZ9S9Gb8rhsdzyWGKw5XiGLnT4+0PKse1PnP0WqYUKykU9uEd9JKqP",
	"f1XOJ6ZpKt4l72wSxe181V5vAtcP1MwRH9JNB43fBFt9FMW8tJEMVBIH+mS8cmSrD2ZEMXL8OZvbjo4x",
	"qWdMqkeXAyHza7B8Qgx/fG8Uk3oBoz1tWeYgCjWkbCePpvt101CQe3XIrFAtWkdmbjoVkCiOP5pKhoLj",
	"XU9+fiG5Wf7kl4JJoVcUOuopolMJvan5iyI/2sg+H4EChujygBIJqVos2uNY1xis7tmQ0ylkg7pmFv3S",
	"o3TsDfuycTwYDCGVxm6toINpM30NAAD//5xqnPWiBgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
